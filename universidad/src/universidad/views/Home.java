/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package universidad.views;

import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import universidad.controllers.AlumnoData;
import universidad.controllers.Conexion;
import universidad.controllers.InscripcionData;
import universidad.controllers.MateriaData;
import universidad.models.Alumno;
import universidad.models.Materia;

/**
 *
 * @author leo_t
 */
public class Home extends javax.swing.JFrame {

    public static GestionarAlumno formAlumno;
    public static GestionMateria formMateria;
    public static GestionInscripcion formInscripcion;

    public Home() throws IOException, SQLException {
        initComponents();
        this.setLocationRelativeTo(null);
//        Conexion.getConnection();
//        String titulo = "Grupo 15 C1";
//        String mensaje = "<html>"
//                + "<div style='text-align: center;'><h2>Sistema Gestion Alumnos</h2></div>"
//                + "<div style='text-align: center;'><h4>Conectar a base datos</h4></div>"
//                + "</html>";
//        JOptionPane.showMessageDialog(null, mensaje, titulo, JOptionPane.INFORMATION_MESSAGE);
//        Conexion.getConnection();
        Image icono = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/universidad/img/graduacion.png")); // linea para accerder al recurso
        this.setTitle("Home");
        this.setIconImage(icono); //linea para setear un icono al programa
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane4 = new javax.swing.JDesktopPane();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        verAlumnos = new javax.swing.JScrollPane();
        tablaAlumnos = new javax.swing.JTable();
        verMaterias = new javax.swing.JScrollPane();
        tablaMaterias = new javax.swing.JTable();
        verInscripciones = new javax.swing.JScrollPane();
        tablaInscripciones = new javax.swing.JTable();
        Titulo = new javax.swing.JLabel();
        btnCargarDatos = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuAlumnos = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        MenuMaterias = new javax.swing.JMenu();
        menuMateria = new javax.swing.JMenuItem();
        menuInscripcion = new javax.swing.JMenu();
        menuIncripciones = new javax.swing.JMenuItem();
        menuNotas = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jDesktopPane4Layout = new javax.swing.GroupLayout(jDesktopPane4);
        jDesktopPane4.setLayout(jDesktopPane4Layout);
        jDesktopPane4Layout.setHorizontalGroup(
            jDesktopPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane4Layout.setVerticalGroup(
            jDesktopPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setName("Home"); // NOI18N
        setResizable(false);

        tablaAlumnos.setAutoCreateRowSorter(true);
        tablaAlumnos.setBackground(new java.awt.Color(204, 204, 204));
        tablaAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "DNI", "Nombre", "Apellido", "Alumnos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaAlumnos.setToolTipText("");
        tablaAlumnos.setGridColor(new java.awt.Color(102, 102, 102));
        tablaAlumnos.setOpaque(false);
        tablaAlumnos.setSelectionBackground(new java.awt.Color(153, 153, 153));
        tablaAlumnos.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tablaAlumnos.getTableHeader().setReorderingAllowed(false);
        verAlumnos.setViewportView(tablaAlumnos);

        jTabbedPane1.addTab("Ver todos los Alumnos", verAlumnos);

        tablaMaterias.setAutoCreateRowSorter(true);
        tablaMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Materias", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        verMaterias.setViewportView(tablaMaterias);
        if (tablaMaterias.getColumnModel().getColumnCount() > 0) {
            tablaMaterias.getColumnModel().getColumn(0).setResizable(false);
            tablaMaterias.getColumnModel().getColumn(1).setResizable(false);
            tablaMaterias.getColumnModel().getColumn(2).setResizable(false);
        }

        jTabbedPane1.addTab("Ver todas las Materias", verMaterias);

        tablaInscripciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id Alumno", "Nombre y Apellido", "Matrias en curso"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        verInscripciones.setViewportView(tablaInscripciones);
        if (tablaInscripciones.getColumnModel().getColumnCount() > 0) {
            tablaInscripciones.getColumnModel().getColumn(0).setResizable(false);
            tablaInscripciones.getColumnModel().getColumn(1).setResizable(false);
            tablaInscripciones.getColumnModel().getColumn(2).setResizable(false);
        }

        jTabbedPane1.addTab("Inscripciones", verInscripciones);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
        );

        Titulo.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        Titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titulo.setText("Sistema de Gesti√≥n");
        Titulo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3), "Universidad de La Punta", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Dialog", 2, 14))); // NOI18N

        btnCargarDatos.setText("Cargar Datos");
        btnCargarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarDatosActionPerformed(evt);
            }
        });

        jDesktopPane2.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(Titulo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(btnCargarDatos, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane2Layout = new javax.swing.GroupLayout(jDesktopPane2);
        jDesktopPane2.setLayout(jDesktopPane2Layout);
        jDesktopPane2Layout.setHorizontalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCargarDatos)
                .addContainerGap(300, Short.MAX_VALUE))
        );
        jDesktopPane2Layout.setVerticalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(btnCargarDatos)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MenuAlumnos.setText("Alumnos");

        jMenuItem4.setText("Gestionar Alumnos");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        MenuAlumnos.add(jMenuItem4);

        jMenuBar1.add(MenuAlumnos);

        MenuMaterias.setText("Materias");

        menuMateria.setText("Gestionar Materia");
        menuMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMateriaActionPerformed(evt);
            }
        });
        MenuMaterias.add(menuMateria);

        jMenuBar1.add(MenuMaterias);

        menuInscripcion.setText("Inscripcion");

        menuIncripciones.setText("Gestionar inscripciones");
        menuIncripciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuIncripcionesActionPerformed(evt);
            }
        });
        menuInscripcion.add(menuIncripciones);

        menuNotas.setText("Cargar Notas");
        menuNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNotasActionPerformed(evt);
            }
        });
        menuInscripcion.add(menuNotas);

        jMenuBar1.add(menuInscripcion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (formAlumno == null) {
            formAlumno = new GestionarAlumno();
            formAlumno.setVisible(true);
           this.setVisible(false);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void btnCargarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarDatosActionPerformed
     int confirm = JOptionPane.showConfirmDialog(this, "Esta accion puede demorar un minuto\n Desea continuar?");
        if (confirm >0) {
            System.out.println("******No hace nada*******");
        }else if (confirm == 0) {
        try {
            mostrarTodosAlumnos();
            mostrarTodasMaterias();
        mostrarTodasInscripciones();
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        } 
    }//GEN-LAST:event_btnCargarDatosActionPerformed

    private void menuMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMateriaActionPerformed
   if (formMateria == null) {
            formMateria = new GestionMateria();
            formMateria.setVisible(true);
           this.setVisible(false);
        }
    }//GEN-LAST:event_menuMateriaActionPerformed

    private void menuIncripcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuIncripcionesActionPerformed
     
            formInscripcion = new GestionInscripcion();
            formInscripcion.setVisible(true);
           this.setVisible(false);
       
    }//GEN-LAST:event_menuIncripcionesActionPerformed

    private void menuNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNotasActionPerformed
        // TODO add your handling code here:
        CargaNotas nota = new CargaNotas();
            nota.setVisible(true);
           this.setVisible(false);
    }//GEN-LAST:event_menuNotasActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        JOptionPane.showMessageDialog(null, "Bienvenido al sistema de gestion.\nAccediendo a los datos");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Home().setVisible(true);
            } catch (IOException | SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MenuAlumnos;
    private javax.swing.JMenu MenuMaterias;
    private javax.swing.JLabel Titulo;
    private javax.swing.JButton btnCargarDatos;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JDesktopPane jDesktopPane4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem menuIncripciones;
    private javax.swing.JMenu menuInscripcion;
    private javax.swing.JMenuItem menuMateria;
    private javax.swing.JMenuItem menuNotas;
    private javax.swing.JTable tablaAlumnos;
    private javax.swing.JTable tablaInscripciones;
    private javax.swing.JTable tablaMaterias;
    private javax.swing.JScrollPane verAlumnos;
    private javax.swing.JScrollPane verInscripciones;
    private javax.swing.JScrollPane verMaterias;
    // End of variables declaration//GEN-END:variables

    /**
     *Metoodo para traer los datos de la bd con una sentencia SELECT de alumnos.
     * @throws IOException
     * @throws SQLException
     */
    public final void mostrarTodosAlumnos() throws IOException, SQLException {
        DefaultTableModel modeloAlumno = new DefaultTableModel();
        AlumnoData alumno = new AlumnoData();
        tablaAlumnos.setModel(modeloAlumno);
        ArrayList<Alumno> alumnos = alumno.selectAlumnosTodos(true);
        modeloAlumno.addColumn("DNI");
        modeloAlumno.addColumn("Nombres");
        modeloAlumno.addColumn("Apellido");
        modeloAlumno.addColumn("Fecha de Nacimiento");
        alumnos = alumno.selectAlumnos(0);// si colocas 0  tendras todoslos alumnos
        for (Alumno alumno1 : alumnos) {
            modeloAlumno.addRow(new Object[]{alumno1.getDni(), alumno1.getNombre(), alumno1.getApellido().toUpperCase(), alumno1.getFecha_nacimiento()});
        }
    }

    /**
     *
     * @throws IOException
     * @throws SQLException
     */


    public final void mostrarTodasMaterias() throws IOException, SQLException {
        DefaultTableModel modeloMateria = new DefaultTableModel();
        MateriaData materia = new MateriaData();
        ArrayList<Materia> materias = materia.selectMaterias(0);
        modeloMateria.addColumn("Nombre");
        modeloMateria.addColumn("A√±o en curso");
        modeloMateria.addColumn("Estado");
        for (Materia materia1 : materias) {
            modeloMateria.addRow(new Object[]{materia1.getNombre(), materia1.getAnio(), materia1.isEstado()});
        }

        tablaMaterias.setModel(modeloMateria);
    }

    /**
     * Metodo que agrega las columnas traidas desde la bd a la tabla de
     * inscripciones
     *
     * @throws IOException
     * @throws java.sql.SQLException
     */
    public void mostrarTodasInscripciones() throws IOException, SQLException {
        DefaultTableModel modelo = new DefaultTableModel();
        tablaInscripciones.setModel(modelo);
        HashMap<String, ArrayList<String>> inscp = new HashMap<>();
        modelo.addColumn("id");
        modelo.addColumn("Alumno");
        modelo.addColumn("Materias");
        InscripcionData inscripcion = new InscripcionData();
        inscp = inscripcion.selectInscriptos();
        for (Map.Entry<String, ArrayList<String>> entry : inscp.entrySet()) {
            String clave = entry.getKey();
            ArrayList<String> data = entry.getValue();
            modelo.addRow(new Object[]{entry.getKey(), data.get(0), data.get(1)});
        }
    }
}
